#include <catch2/catch.hpp>
#include "Net.hpp"
#include "InputLayer.hpp"
#include "ConvolutionalLayer.hpp"
#include "MemoryStream.hpp"

TEST_CASE("Convolutional layer forward", "[convolution]")
{
    Net network;
    std::shared_ptr<ConvolutionalLayer> conv = std::make_shared<ConvolutionalLayer>(1, 3, 2, 1);
    network.appendLayer(std::make_shared<InputLayer>(3, 5, 5))
            .appendLayer(conv);

    REQUIRE(conv->output->depth() == 1);
    REQUIRE(conv->output->height() == 3);
    REQUIRE(conv->output->width() == 3);

    // Kernel: {{{0, -1, 1}, {1, 1, 1}, {-1, -1, 0}}, {{-1, -1, -1}, {0, 1, -1}, {-1, 1, -1}}, {{1, 0, 0}, {-1, 1, 0}, {-1, 1, 1}}}
    // Bias: 1
    unsigned char data[] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0x3f,
            0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,
            0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0xbf,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0xbf,
            0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0xbf,
            0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,
            0x00, 0x00, 0x80, 0x3f
    };
    MemoryStream memoryStream(data, sizeof(data));
    network.load(memoryStream);

    Tensor<> &input = network.getInput();
    input = {{{0, 2, 0, 0, 0}, {1, 2, 1, 0, 1}, {2, 1, 1, 0, 2}, {1, 2, 2, 2, 2}, {2, 2, 1, 1, 2}},
             {{0, 1, 2, 1, 2}, {0, 0, 1, 0, 1}, {0, 2, 2, 1, 1}, {0, 2, 1, 2, 2}, {2, 1, 2, 0, 1}},
             {{0, 0, 1, 1, 0}, {0, 1, 2, 1, 0}, {2, 1, 0, 2, 0}, {2, 0, 1, 1, 1}, {0, 1, 0, 2, 1}}};

    network.forward();

    Tensor<> expectedResult(1, 3, 3);
    expectedResult = {{{2, 5, 1}, {4, -3, -3}, {5, 1, -1}}};

    REQUIRE(network.getOutput() == expectedResult);
}